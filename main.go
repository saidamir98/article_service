package main

import (
	"fmt"
	"log"
	"net"
	"net/http"

	"uacademy/blogpost/article_service/config"
	docs "uacademy/blogpost/article_service/docs" // docs is generated by Swag CLI, you have to import it.
	"uacademy/blogpost/article_service/handlers"
	"uacademy/blogpost/article_service/protogen/blogpost"
	"uacademy/blogpost/article_service/services/article"
	"uacademy/blogpost/article_service/services/author"
	"uacademy/blogpost/article_service/storage"
	"uacademy/blogpost/article_service/storage/postgres"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
)

func initGRPC() {
	println("gRPC server tutorial in Go")

	listener, err := net.Listen("tcp", ":9000")
	if err != nil {
		panic(err)
	}

	srv := grpc.NewServer()

	authorService := &author.AuthorService{}
	blogpost.RegisterAuthorServiceServer(srv, authorService)

	articleService := &article.ArticleService{}
	blogpost.RegisterArticleServiceServer(srv, articleService)

	reflection.Register(srv)

	if err := srv.Serve(listener); err != nil {
		log.Fatalf("failed to serve: %v", err)
	}
}

// @license.name  Apache 2.0
// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html
func main() {
	initGRPC()

	fmt.Println("---------------------------------------------->")

	cfg := config.Load()

	psqlConnString := fmt.Sprintf(
		"host=%s port=%d user=%s password=%s dbname=%s sslmode=disable",
		cfg.PostgresHost,
		cfg.PostgresPort,
		cfg.PostgresUser,
		cfg.PostgresPassword,
		cfg.PostgresDatabase,
	)

	docs.SwaggerInfo.Title = cfg.App
	docs.SwaggerInfo.Version = cfg.AppVersion

	var err error
	var stg storage.StorageI
	stg, err = postgres.InitDB(psqlConnString)
	if err != nil {
		panic(err)
	}

	if cfg.Environment != "development" {
		gin.SetMode(gin.ReleaseMode)
	}

	r := gin.New()

	if cfg.Environment != "production" {
		r.Use(gin.Logger(), gin.Recovery()) // Later they will be replaced by custom Logger and Recovery
	}

	r.GET("/ping", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{
			"message": "pong",
		})
	})

	h := handlers.NewHandler(stg, cfg)

	v1 := r.Group("/v1")
	{
		v1.POST("/article", h.CreateArticle)
		v1.GET("/article/:id", h.GetArticleByID)
		v1.GET("/article", h.GetArticleList)
		v1.PUT("/article", h.UpdateArticle)
		v1.DELETE("/article/:id", h.DeleteArticle)

		v1.POST("/author", h.CreateAuthor)
		v1.GET("/author/:id", h.GetAuthorByID)
		v1.GET("/author", h.GetAuthorList)
	}

	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	r.Run(cfg.HTTPPort) // listen and serve on 0.0.0.0:8080 (for windows "localhost:8080")
}
